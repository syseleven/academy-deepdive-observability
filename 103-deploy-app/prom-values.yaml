# deploy prometheus
prometheus:
  prometheusSpec:
    retention: 24h
    ruleSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    replicas: 2
    podAntiAffinity: hard
    # add a manual scrapeconfig for our application
    additionalScrapeConfigs:
      - job_name: 'metrics-app'
        honor_timestamps: true
        scrape_interval: 5s
        scrape_timeout: 5s
        metrics_path: /metrics
        scheme: http
        follow_redirects: true
        enable_http2: true
        kubernetes_sd_configs:
          - role: endpoints
            kubeconfig_file: ""
            follow_redirects: true
            enable_http2: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: sys11-quobyte-external-provisioner
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  # now we enable an ingress resource to make prometheus web interface publically available
  # under a DNS name secured by a certificate and basic authentication
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      kubernetes.io/ingress.class: nginx
    hosts:
      - prometheus.workshop.metakube.org
    tls:
      - hosts:
          - prometheus.workshop.metakube.org

# deploy grafana
grafana:
  nodeSelector:
    grafana: "true"
  replicas: 1
  adminPassword: admin
  persistence:
    enabled: true
  ingress:
    enabled: false
  # "classic" grafana configuration
  grafana.ini:
    users:
      auto_assign_org_role: Admin
    analytics:
      check_for_updates: false
  # make grafana notice new dashboards for import at runtime
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
    datasources:
      enabled: true
      label: grafana_datasource

# deploy alertmanager
alertmanager:
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    replicas: 2
    podAntiAffinity: hard

# monitor kubernetes components
defaultRules:
  rules:
    kubernetesResources: true

# monitor the kubelet on worker nodes
kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    https: true

# monitor coreDNS service
coreDns:
  enabled: false

# monitor the kubernetes database - etcd key values store
kubeEtcd:
  enabled: true

# we do not need these because the kube-controller-manager and kube-scheduler
# are managed and monitored by MetaKube itself
kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false
